generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person {
  id             Int       @id @default(autoincrement())
  firstName      String    @db.VarChar(20)
  middleName     String?   @db.VarChar(20)
  firstLastName  String    @db.VarChar(20)
  secondLastName String?   @db.VarChar(20)
  docNumber      String    @unique @db.VarChar(12)
  docTypeId      Int
  addressId      Int
  regDate        DateTime  @default(now())
  email          String    @unique @db.VarChar(254)
  cellphone      String?   @db.VarChar(24)
  landline       String    @db.VarChar(24)
  address        Address   @relation(fields: [addressId], references: [id])
  docType        DocType   @relation(fields: [docTypeId], references: [id])
  client         Client?
  receipts       Receipt[]
  student        Student?
  user           User?
}

model Student {
  id                Int           @id @default(autoincrement())
  personId          Int           @unique
  careerId          Int
  statusId          Int
  currentSemester   Int
  career            Career        @relation(fields: [careerId], references: [id])
  person            Person        @relation(fields: [personId], references: [id])
  status            StudentStatus @relation(fields: [statusId], references: [id])
  billings          Billing[]
  enrolledSemesters Enrollment[]
}

model Client {
  id           Int        @id @default(autoincrement())
  occupationId Int
  personId     Int        @unique
  occupation   Occupation @relation(fields: [occupationId], references: [id])
  person       Person     @relation(fields: [personId], references: [id])
}

model Occupation {
  id        Int      @id @default(autoincrement())
  ocupation String   @db.VarChar(40)
  clients   Client[]
}

model StudentStatus {
  id          Int       @id @default(autoincrement())
  status      String    @db.VarChar(30)
  description String    @db.VarChar(64)
  students    Student[]
}

model Enrollment {
  id         Int      @id @default(autoincrement())
  semesterId Int
  studentId  Int
  semester   Semester @relation(fields: [semesterId], references: [id])
  student    Student  @relation(fields: [studentId], references: [id])
}

model Semester {
  id          Int          @id @default(autoincrement())
  startDate   DateTime
  endDate     DateTime
  semester    String       @db.VarChar(30)
  billings    Billing[]
  enrollments Enrollment[]
}

model Career {
  id       Int       @id @default(autoincrement())
  career   String    @db.VarChar(40)
  students Student[]
}

model DocType {
  id      Int      @id @default(autoincrement())
  type    String   @db.VarChar(4)
  persons Person[]
}

model Address {
  id           Int      @id @default(autoincrement())
  shortAddress String   @db.VarChar(120)
  persons      Person[]
}

model Receipt {
  id              Int           @id @default(autoincrement())
  personId        Int
  createdAt       DateTime      @default(now())
  amount          Float         @default(0)
  person          Person        @relation(fields: [personId], references: [id])
  charges         Charge[]
  chargedProducts ProductSale[]
}

model Product {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(64)
  stock        Int
  price        Float
  categoryId   Int
  category     Category      @relation(fields: [categoryId], references: [id])
  billings     Billing[]
  productSales ProductSale[]
}

model ProductSale {
  id        Int     @id @default(autoincrement())
  productId Int
  receiptId Int
  quantity  Int
  price     Float
  product   Product @relation(fields: [productId], references: [id])
  receipt   Receipt @relation(fields: [receiptId], references: [id])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(64)
  description String    @db.VarChar(128)
  products    Product[]
}

model Charge {
  id              Int           @id @default(autoincrement())
  paymentMethodId Int
  amount          Float
  date            DateTime
  receiptId       Int
  conversionId    Int
  conversion      Conversion    @relation(fields: [conversionId], references: [id])
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  receipt         Receipt       @relation(fields: [receiptId], references: [id])
}

model PaymentMethod {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(26)
  description String   @db.VarChar(64)
  currencyId  Int
  currency    Currency @relation(fields: [currencyId], references: [id])
  charges     Charge[]
}

model Currency {
  id             Int             @id @default(autoincrement())
  symbol         String          @db.VarChar(4)
  name           String          @db.VarChar(32)
  paymentMethods PaymentMethod[]
}

model Conversion {
  id      Int      @id @default(autoincrement())
  date    DateTime @default(now())
  dolar   Float
  euro    Float
  charges Charge[]
}

model Parameters {
  id         Int    @id @default(autoincrement())
  institute  String @db.VarChar(128)
  rif        String @db.VarChar(28)
  phone      String @db.VarChar(32)
  population String @db.VarChar(64)
  address    String @db.VarChar(128)
}

model User {
  id       Int        @id @default(autoincrement())
  personId Int        @unique
  username String     @db.VarChar(32)
  password String     @db.VarChar
  secretId Int        @unique
  statusId Int
  person   Person     @relation(fields: [personId], references: [id])
  secret   Secret     @relation(fields: [secretId], references: [id])
  status   UserStatus @relation(fields: [statusId], references: [id])
  roles    Role[]
}

model Secret {
  id            Int    @id @default(autoincrement())
  questionOne   String @db.VarChar(128)
  answerOne     String @db.VarChar(128)
  questionTwo   String @db.VarChar(128)
  answerTwo     String @db.VarChar(128)
  questionThree String @db.VarChar(128)
  answerThree   String @db.VarChar(128)
  user          User?
}

model UserStatus {
  id          Int    @id @default(autoincrement())
  status      String @db.VarChar(30)
  description String @db.VarChar(64)
  users       User[]
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(30)
  level       Int
  description String       @db.VarChar(64)
  permissions Permission[]
  users       User[]
}

model Permission {
  id          Int    @id @default(autoincrement())
  permission  String @db.VarChar(30)
  description String @db.VarChar(64)
  roles       Role[]
}

model Billing {
  id          Int      @id @default(autoincrement())
  studentId   Int
  semesterId  Int
  productId   Int
  isCharged   Boolean  @default(false)
  createAt    DateTime @default(now())
  updateAt    DateTime @default(now())
  productName String   @db.VarChar(64)
  amount      Float
  product     Product  @relation(fields: [productId], references: [id])
  semester    Semester @relation(fields: [semesterId], references: [id])
  student     Student  @relation(fields: [studentId], references: [id])
}

model SecretQuestion {
  id       Int    @id @default(autoincrement())
  question String @db.VarChar(128)
}
